#!/usr/bin/env escript
%% -*- erlang -*-
%%!

%%% - Replace the shards used by the [local] logplex
%%% instace.

main([Shards, LogplexShardUrls]) when Shards =:= "-s";
                               Shards =:= "--shards" ->
    from_stdin(LogplexShardUrls);
main([Env]) when Env =:= "-e";
                 Env =:= "--env" ->
    from_env();
main(_) ->
    usage().

%% Internal
usage() ->
    io:format("Usage: bin/replace_shards~n"),
    io:format("  bin/replace_shards -h/--help~n"),
    io:format("  bin/replace_shards -s/--shards LIST_OF_SHARDS~n"),
    io:format("  bin/replace_shards -e/--env~n").

from_stdin(LogplexShardUrls) ->
    update_shards(LogplexShardUrls).

from_env() ->
    case os:getenv("LOGPLEX_SHARD_URLS") of
        false ->
            io:format("LOGPLEX_SHARD_URLS is not set"),
            halt(1);
        LogplexShardUrls ->
            update_shards(LogplexShardUrls)
    end.

update_shards(LogplexShardUrls) ->
    case connect(logplex_node(), cookie()) of
        {error, Why} ->
            io:format("Could not connect to node ~p", [Why]),
            halt(1);
        {connected, Node} ->
            {OldShards, _, _} = rpc:call(Node, logplex_shard_info, read, [logplex_read_pool_map]),
            LogplexShards = rpc:call(Node, logplex_shard, prepare_shard_urls, [LogplexShardUrls]),
            good = rpc:call(Node, logplex_shard, prepare_url_update, [LogplexShards]),
            good = rpc:call(Node, logplex_shard, attempt_to_commit_url_update, []),
            shard_info_updated = rpc:call(Node, logplex_shard, make_update_permanent, []),
            {NewShards, _, _} = rpc:call(Node, logplex_shard_info, read, [logplex_read_pool_map]),
            io:format("Replaced shards:~n~p~nwith new shards:~n ~p~n", [dict:to_list(OldShards),
                                                                        dict:to_list(NewShards)]),
            halt(0)
    end.


connect(RemoteNode, Cookie) ->
    MyName = caller_name(),
    net_kernel:start([MyName, longnames]),
    erlang:set_cookie(MyName, Cookie),
    try_connect(RemoteNode, 5).

try_connect(_RemoteNode, 0) ->
    {error, gave_up};
try_connect(RemoteNode, RetriesLeft) ->
    case net_adm:ping(RemoteNode) of
        pong ->
            {connected, RemoteNode};
        Error ->
            io:format("Could not connect, retrying in 1 second, Reason ~p", [Error]),
            timer:sleep(timer:seconds(1)),
            try_connect(RemoteNode, RetriesLeft - 1)
    end.

cookie() ->
    CookieString = 
        case os:getenv("LOGPLEX_COOKIE") of
            false ->
                {ok, Bin} = file:read_file("/home/logplex/keys.sh"),
                {match, [CookieStr]} = re:run(Bin, "LOGPLEX_COOKIE='(.*)'",
                                              [{capture, all_but_first, list}]),
                CookieStr;
            CookieStr ->
                CookieStr
        end,
    list_to_atom(CookieString).

logplex_node() ->
    list_to_atom("logplex@" ++ net_adm:localhost()).

caller_name() ->
    Me = filename:basename(escript:script_name()),
    list_to_atom(Me ++ "_"
                 ++ os:getpid()
                 ++ "@" ++ net_adm:localhost()).
